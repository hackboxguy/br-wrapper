#!/bin/sh
#
# startup script for aws-pub-sub-demo
#
CONF_FILE_PATH=/mnt/certs/aws-iot-pubsub-agent.conf
AWS_AGENT=aws-iot-pubsub-agent
start() {
	echo "Starting Aws-pub-sub-demo: "
        #calling this script too early before time-sync, tls-handshake will fail, hence adding a dummy sleep of 10sec
	sleep 10 #TODO: a clean implementation is required so that aws-iot-pubsub-agent will be called only after timesync

        #certificate and private-key files are must, without them aws-iot-pubsub-demo cannot proceed
	if [ -f /mnt/certs/*certificate.pem.crt ]; then
		CERT_FILE=$(ls /mnt/certs/|grep "certificate.pem.crt")
		CERT_FILE_ARG="/mnt/certs/$CERT_FILE"
	else
		echo "Missing CERT_FILE!!"
		return 1
	fi
	if [ -f /mnt/certs/*private.pem.key ]; then
		KEY_FILE=$(ls /mnt/certs/|grep "private.pem.key")
		KEY_FILE_ARG="/mnt/certs/$KEY_FILE"
	else
		echo "Missing KEY_FILE!!"
		return 1
	fi

        #dont ask user for AmazonRootCA file, we already have it in our rootfs
	if [ -f /etc/AmazonRootCA1.pem ]; then
		CA_FILE=/etc/AmazonRootCA1.pem
	else
		echo "Missing CA_FILE!!"
		return 1
	fi

	#check if aws-iot-pubsub-agent.conf exists in /boot partition
	if [ ! -f "$CONF_FILE_PATH" ]; then
		echo "Missing $CONF_FILE_PATH!!"
		return 1
	fi
	#endpoint argument must be specified in aws-iot-pubsub-agent.conf else do not start the agent
	ENDPOINT=$(cat $CONF_FILE_PATH | grep endpoint)
	if [ $? != 0 ]; then
		echo "Missing endpoint!!"
		return 1
	fi
	ENDPOINT=$(cat $CONF_FILE_PATH | grep endpoint | awk '{print $2}')

	#check if user has requested a custom log file
	VERBOSE_FILE=$(cat $CONF_FILE_PATH | grep verbosefile)
	if [ $? == 0 ]; then
		VERBOSE_FILE=$(cat $CONF_FILE_PATH | grep verbosefile | awk '{print $2}')
	else
		VERBOSE_FILE="/tmp/aws-iot-pubsub-agent.log" #else use default
	fi

	#check if user has requested a loglevel [Trace/Debug/Info/Warn/Error/Fatal/None]
	VERBOSE_ARGS=""
	VERBOSITY=$(cat $CONF_FILE_PATH | grep verbosity)
	if [ $? == 0 ]; then
		VERBOSITY=$(cat $CONF_FILE_PATH | grep verbosity | awk '{print $2}')
		VERBOSE_ARGS="--verbosity $VERBOSITY"
	fi

	#check if user has requested total number of messages to publish
	COUNT_ARGS=""
	COUNT=$(cat $CONF_FILE_PATH | grep total-publish-count)
	if [ $? == 0 ]; then
		COUNT=$(cat $CONF_FILE_PATH | grep total-publish-count | awk '{print $2}')
		COUNT_ARGS="--count $COUNT"
	fi

	#check if user has requested for custom topic to publish
	TOPIC_ARGS=""
	TOPIC=$(cat $CONF_FILE_PATH | grep publish-topic)
	if [ $? == 0 ]; then
		TOPIC=$(cat $CONF_FILE_PATH | grep publish-topic | awk '{print $2}')
		TOPIC_ARGS="--topic $TOPIC"
	fi

	#check if clientid is specified, if available, then use it to publish the topic
	CLTID_ARGS=""
	CLTID=$(cat $CONF_FILE_PATH | grep clientid)
	if [ $? == 0 ]; then
		CLTID=$(cat $CONF_FILE_PATH | grep clientid | awk '{print $2}')
		CLTID_ARGS="--client_id $CLTID"
	fi

	#start the agent with all required args
	$AWS_AGENT --ca_file $CA_FILE --cert $CERT_FILE_ARG --key $KEY_FILE_ARG --endpoint $ENDPOINT $VERBOSE_ARGS $COUNT_ARGS $TOPIC_ARGS $CLTID_ARGS > $VERBOSE_FILE 2>&1
	echo "OK"
}

stop() {
	echo -n "Stopping Aws-pub-sub-demo: "
	#TODO: check if $AWS_AGENT is still runing, if so, then send SIGTERM for gracious shutdown
	echo "OK"
}

case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart|reload)
	stop
	start
	;;
  *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac

exit $?
